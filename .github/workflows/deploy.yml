name: Deploy to Elastic Beanstalk

on:
  push:
    branches: [ndzalama/feat/deploy]
    paths:
      - "pom.xml"
      - ".github/workflows/deploy.yml"
      - "flyway/**"
      - "terraform/**"
      - "api/src/**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Build the project with Maven
        working-directory: ./api
        run: mvn clean package -DskipTests

      - name: Check
        run: ls -a api/target

      - name: Upload JAR
        # We upload so we can re-use same jar in next job.
        uses: actions/upload-artifact@v4
        with:
          # Name of artifact can be anything
          name: artifact
          # Relative path to jar file
          path: api/target/*.jar

  deploy:
    # Depends on build's job
    needs: build
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR
        # Download the artifact which was uploaded in the Build Archive's job
        uses: actions/download-artifact@v4
        with:
          name: artifact

      - name: Check Downloaded artifact
        run: ls -a ./

      - uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.RDS_IAM_USER_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.RDS_IAM_USER_SECRET_KEY }}
          region: ${{ secrets.AWS_REGION }}
          application_name: auto-board
          environment_name: auto-board-env
          version_label: "auto-board-${{ github.sha }}-${{ github.run_id }}"
          deployment_package: autoboard-0.0.1-SNAPSHOT.jar

deploy:
    name: Check If RDS Instance Exists
    runs-on: ubuntu-latest
    needs: terraform

    concurrency:
      group: ${{ github.workflow }}-deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.RDS_IAM_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.RDS_IAM_USER_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if RDS instance exists
        id: check-rds
        run: |
          if aws rds describe-db-instances --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }} > /dev/null 2>&1; then
            echo "DB_EXISTS=true" >> $GITHUB_ENV
          else
            echo "DB_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Wait for RDS to be available
        if: env.DB_EXISTS == 'false'
        run: |
          echo "Waiting for RDS instance to be available..."
          aws rds wait db-instance-available --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }}

  migrate:
    name: Run Database Migrations
    needs: deploy
    runs-on: ubuntu-latest

    concurrency:
      group: ${{ github.workflow }}-migrate-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.RDS_IAM_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.RDS_IAM_USER_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get RDS Endpoint
        id: get-endpoint
        run: |
          ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }} --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "RDS_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV

      - name: Create Initial Database
        run: |
          docker run --rm \
            -e PGPASSWORD=${{ secrets.DB_PASSWORD }} \
            postgres:latest \
            bash -c "
              echo 'Checking if AutoBoard database exists...';
              if psql -h ${{ env.RDS_ENDPOINT }} -U ${{ secrets.DB_USERNAME }} -d postgres -tAc \"SELECT 1 FROM pg_database WHERE UPPER(datname) = 'AUTOBOARD';\" | grep -q 1; then
                echo 'Database AutoBoard already exists';
              else
                echo 'Database AutoBoard does not exist. Creating database...';
                psql -h ${{ env.RDS_ENDPOINT }} -U ${{ secrets.DB_USERNAME }} -d postgres -c \"CREATE DATABASE AutoBoard;\";
              fi"

      - name: Debug Connection String
        run: |
          echo "Using connection string: jdbc:postgresql://${{ env.RDS_ENDPOINT }}:5432/${{ secrets.DB_NAME }}"

      - name: Run Flyway migrations
        run: |
          docker run --rm \
          -v $(pwd)/flyway:/flyway/sql \
          flyway/flyway migrate \
          -url="jdbc:postgresql://${{ env.RDS_ENDPOINT }}:5432/${{ secrets.DB_NAME }}" \
          -user=${{ secrets.DB_USERNAME }} \
          -password=${{ secrets.DB_PASSWORD }}
