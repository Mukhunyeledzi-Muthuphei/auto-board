name: Database Infrastructure 🐳 & Migration CI ✈️🧪

on:
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/database-ci.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read


jobs:
  deploy:
    name: 🐳 Deploy RDS Instance 
    runs-on: ubuntu-latest
    
    concurrency:
      group: ${{ github.workflow }}-deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.RDS_IAM_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.RDS_IAM_USER_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: 🔍 Check if RDS instance exists
        id: check-rds
        run: |
          if aws rds describe-db-instances --db-instance-identifier autoboard_instance > /dev/null 2>&1; then
            echo "DB_EXISTS=true" >> $GITHUB_ENV
          else
            echo "DB_EXISTS=false" >> $GITHUB_ENV
          fi
      
      - name: 🚀 Create RDS Postgres Server instance
        if: env.DB_EXISTS == 'false'
        run: |
          aws rds create-db-instance \
              --db-instance-identifier autoboard_instance \
              --db-instance-class db.t3.micro \
              --engine postgres \
              --db-name autoboard \
              --allocated-storage 20 \
              --master-username ${{ secrets.DB_USERNAME }} \
              --master-user-password ${{ secrets.DB_PASSWORD }} \
              --backup-retention-period 7 \
              --no-multi-az \
              --publicly-accessible \
              --vpc-security-group-ids ${{ secrets.DB_SECURITY_GROUP_ID }} \
              --db-subnet-group-name ${{ secrets.DB_SUBNET_GROUP }} 

      - name: ⏳ Wait for RDS to be available
        if: env.DB_EXISTS == 'false'
        run: |
          echo "Waiting for RDS instance to be available..."
          aws rds wait db-instance-available --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }}

  migrate:
    name: ✈️🧪 Run Database Migrations
    needs: deploy
    runs-on: ubuntu-latest
    
    concurrency:
      group: ${{ github.workflow }}-migrate-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.RDS_IAM_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.RDS_IAM_USER_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: 📍 Get RDS Endpoint
        id: get-endpoint
        run: |
          ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier autoboard_instance --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "RDS_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
