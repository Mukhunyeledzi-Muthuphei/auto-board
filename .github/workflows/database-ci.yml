name: "Database Infrastructure"

on:
  workflow_run:
    workflows: [ "Terraform Plan" ]
    types:
      - completed
#  push:
#    branches: ["main"]
#    paths:
#      - ".github/workflows/database-ci.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read


jobs:
  deploy:
    name: Deploy RDS Instance
    runs-on: ubuntu-latest
    
    concurrency:
      group: ${{ github.workflow }}-deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.RDS_IAM_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.RDS_IAM_USER_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Check if RDS instance exists
        id: check-rds
        run: |
          if aws rds describe-db-instances --db-instance-identifier autoboard_instance > /dev/null 2>&1; then
            echo "DB_EXISTS=true" >> $GITHUB_ENV
          else
            echo "DB_EXISTS=false" >> $GITHUB_ENV
          fi
      
      - name: Create RDS Postgres Server instance
        if: env.DB_EXISTS == 'false'
        run: |
          aws rds create-db-instance \
              --db-instance-identifier autoboard-instance \
              --db-instance-class db.t3.micro \
              --engine postgres \
              --db-name autoboard \
              --allocated-storage 20 \
              --master-username ${{ secrets.DB_USERNAME }} \
              --master-user-password ${{ secrets.DB_PASSWORD }} \
              --backup-retention-period 7 \
              --no-multi-az \
              --publicly-accessible \
              --vpc-security-group-ids ${{ secrets.DB_SECURITY_GROUP_ID }} \
              --db-subnet-group-name ${{ secrets.DB_SUBNET_GROUP }} 

      - name: ⏳ Wait for RDS to be available
        if: env.DB_EXISTS == 'false'
        run: |
          echo "Waiting for RDS instance to be available..."
          aws rds wait db-instance-available --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }}

  migrate:
    name: Run Database Migrations
    needs: deploy
    runs-on: ubuntu-latest
    
    concurrency:
      group: ${{ github.workflow }}-migrate-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-access-key-id: ${{ secrets.RDS_IAM_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.RDS_IAM_USER_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Get RDS Endpoint
        id: get-endpoint
        run: |
          ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier autoboard_instance --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "RDS_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV

      - name: Create Initial Database
        run: |
          docker run --rm \
            postgres:latest \
            psql -h ${{ env.RDS_ENDPOINT }} -U ${{ secrets.DB_USERNAME }} -d postgres -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = 'AutoBoard') THEN CREATE DATABASE AutoBoard; END IF; \$\$;"

      - name: Debug Connection String
        run: |
          echo "Using connection string: jdbc:sqlserver://${{ env.RDS_ENDPOINT }}:1433;databaseName=${{ vars.DB_NAME }};encrypt=true;trustServerCertificate=true"
      - name: Run Flyway migrations
        run: |
          docker run --rm \
          -v $(pwd)/migration:/flyway/sql \
          flyway/flyway migrate \
          -url="jdbc:postgresql://${{ env.RDS_ENDPOINT }}:5432/${{ vars.DB_NAME }}" \
          -user=${{ vars.DB_MASTER_USERNAME }} \
          -password=${{ secrets.DB_PASSWORD }}

