name: Terraform Plan + Apply + Database

on:
  pull_request:

env:
  TF_CLOUD_ORGANIZATION: "auto-board"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "auto-board-github-actions"
  CONFIG_DIRECTORY: "./terraform"

permissions:
  id-token: write
  contents: read


jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Terraform Apply (Only if changes exist)
        if: fromJSON(steps.plan-output.outputs.changes) == 'true'
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        with:
          run: ${{ steps.plan-run.outputs.run_id }}

  deploy:
    name: Check If RDS Instance Exists
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.RDS_IAM_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.RDS_IAM_USER_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if RDS instance exists
        id: check-rds
        run: |
          if aws rds describe-db-instances --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }} > /dev/null 2>&1; then
            echo "DB_EXISTS=true" >> $GITHUB_ENV
          else
            echo "DB_EXISTS=false" >> $GITHUB_ENV

      - name: Wait for RDS to be available
        if: env.DB_EXISTS == 'false'
        run: |
          echo "Waiting for RDS instance to be available..."
          aws rds wait db-instance-available --db-instance-identifier ${{ secrets.DB_INSTANCE_IDENTIFIER }}

  migrate:
    name: Run Database Migrations
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.RDS_IAM_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.RDS_IAM_USER_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run Flyway migrations
        run: |
          docker run --rm \
            -v $(pwd)/migration:/flyway/sql \
            flyway/flyway migrate \
            -url="jdbc:postgresql://${{ env.RDS_ENDPOINT }}:5432/${{ vars.DB_NAME }}" \
            -user=${{ vars.DB_MASTER_USERNAME }} \
            -password=${{ secrets.DB_PASSWORD }}
